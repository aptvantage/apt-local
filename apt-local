#!/bin/bash
set -euo pipefail

# apt-local: A thin wrapper around k3d for managing a local k8s cluster that makes it easy
# to expose services via ingress locally with no port-forwarding

K3D_CLUSTER_NAME=apt-local

function _isInstalled() {
    k3d cluster get $K3D_CLUSTER_NAME > /dev/null 2>&1
    echo $?
}

function _k3dInstalled() {
  which k3d > /dev/null 2>&1
  echo $?
}

function _mkcertInstalled() {
  which mkcert > /dev/null 2>&1
  echo $?
}

function _waitForKnativeServing() {
  start_time=$(date +%s)
  timeout=300  # 5 minutes in seconds

  while true; do
    elapsed=$(( $(date +%s) - start_time ))
    if [ $elapsed -ge $timeout ]; then
      echo "Timeout reached after $timeout seconds. Knative Serving is not ready."
      exit 1
    fi

    status=$(kubectl get knativeserving knative-serving -n knative-serving -o json | jq -r '.status.conditions[] | select(.type == "Ready") | .status' 2>/dev/null || echo "Unknown")
    if [ "$status" = "True" ]; then
      echo "Knative Serving is ready"
      break
    fi
    echo "Waiting for Knative Serving to be ready... (current ready state: $status, elapsed: ${elapsed}s)"
    sleep 3
  done

}

function _waitForKnativeEventing() {
  start_time=$(date +%s)
  timeout=300  # 5 minutes in seconds

  while true; do
    elapsed=$(( $(date +%s) - start_time ))
    if [ $elapsed -ge $timeout ]; then
      echo "Timeout reached after $timeout seconds. Knative Serving is not ready."
      exit 1
    fi

    status=$(kubectl get knativeeventing knative-eventing -n knative-eventing -o json | jq -r '.status.conditions[] | select(.type == "Ready") | .status' 2>/dev/null || echo "Unknown")
    if [ "$status" = "True" ]; then
      echo "Knative Eventing is ready"
      break
    fi
    echo "Waiting for Knative Eventing to be ready... (current ready state: $status, elapsed: ${elapsed}s)"
    sleep 3
  done

}



function _create() {
  installed=$(_isInstalled)
  if [[ "0" -eq $installed ]]; then
    echo "apt-local is already created"
    return
  fi

  installed=$(_k3dInstalled)
  if [[ "0" -ne $installed ]]; then
    echo "apt-local cluster creation failed"
    echo -e "\tk3d could not be found"
    echo -e "\tk3d must be on the PATH"
    echo -e "\tinstall with: brew install k3d"
    exit 1
  fi

  installed=$(_mkcertInstalled)
  if [[ "0" -ne $installed ]]; then
    echo "apt-local cluster creation failed"
    echo -e "\tmkcert could not be found"
    echo -e "\tmkcert must be on the PATH"
    echo -e "\tinstall with: brew install mkcert"
    exit 1
  fi

  echo "installing apt-local cluster..."
#  k3d cluster create $K3D_CLUSTER_NAME --agents 1 -p "8080:80@loadbalancer" -p "8443:443@loadbalancer"
  k3d cluster create $K3D_CLUSTER_NAME --agents 2 --k3s-arg "--disable=traefik@server:0" --port "8080:80@loadbalancer" --port "8443:443@loadbalancer" --image rancher/k3s:v1.32.9-k3s1

  tmp_dir=$(mktemp -d)
  cd "$tmp_dir"
  # install certificate for ssl
  echo "You may be prompted for root credentials which are required to install a root CA"
  echo "This is required in order to trust certificates generated locally by this cluster for the *.apt-local.me domain"
  mkcert -install
  mkcert -key-file tls.key -cert-file tls.crt apt-local.me "*.apt-local.me"
  kubectl create secret tls apt-local-me-tls --cert=tls.crt --key=tls.key
  cd - > /dev/null 2>&1

  echo "installing the knative operator..."
  #TODO -- this should probably be a specific version
  kubectl apply -f https://github.com/knative/operator/releases/latest/download/operator.yaml
  echo "waiting for operator installation to complete"
  kubectl rollout status deployment/knative-operator -n knative-operator --timeout=90s
  if [[ "0" -ne $? ]]; then
    echo "Failed to install knative operator"
    exit 1
  fi

  echo "installing knative serving..."
  cat << EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: knative-serving
---
apiVersion: operator.knative.dev/v1beta1
kind: KnativeServing
metadata:
  name: knative-serving
  namespace: knative-serving
spec:
  ingress:
    kourier:
      enabled: true
  config:
    network:
      ingress-class: "kourier.ingress.networking.knative.dev"
      #https: "true"
    domain:
      "apt-local.me": ""
  #controller-custom-certs:
  #  name: default-apt-local-me-tls
  #  type: Secret
EOF

  _waitForKnativeServing

  echo "installing knative eventing..."
  cat << EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: knative-eventing
---
apiVersion: operator.knative.dev/v1beta1
kind: KnativeEventing
metadata:
  name: knative-eventing
  namespace: knative-eventing
EOF
  _waitForKnativeEventing

  echo "installing sample application..."
  cat << EOF | kubectl apply --namespace=default -f -
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: hello
spec:
  template:
    spec:
      containers:
        - image: gcr.io/cloudrun/hello
EOF
  echo "sample hello app installed at http://hello.default.apt-local.me:8080"
  echo "installation complete"

}

function _delete() {
  installed=$(_isInstalled)
  if [[ "0" -eq $installed ]]; then
    k3d cluster delete $K3D_CLUSTER_NAME
    echo "apt-local cluster has been removed"
  fi
}

if [ $# -eq 0 ]; then
  echo "Usage: $0 {create|delete|start|stop}"
  exit 1
fi

CMD=$1
shift

case $CMD in
  start)
    k3d cluster start $K3D_CLUSTER_NAME "$@"
    ;;
  stop)
    k3d cluster stop $K3D_CLUSTER_NAME "$@"
    ;;
  create)
    _create
    ;;
  delete)
    _delete
    ;;
  *)
    echo "Unknown command. Usage: $0 {create|delete|start|stop}"
    exit 1
    ;;
esac